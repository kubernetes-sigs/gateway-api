/*

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package k8s.io.service_apis.api.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "sigs.k8s.io/controller-runtime/pkg/scheme/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// ForwardToTarget identifies a target object within a known namespace.
message ForwardToTarget {
  // TargetRef is an object reference to forward matched requests to.
  //
  // Support: Core (Kubernetes Services)
  // Support: Implementation-specific (Other resource types)
  optional LocalObjectReference targetRef = 1;

  // TargetPort specifies the destination port number to use for the TargetRef.
  // If unspecified and TargetRef is a Service object consisting of a single
  // port definition, that port will be used. If unspecified and TargetRef is
  // a Service object consisting of multiple port definitions, an error is
  // surfaced in status.
  //
  // Support: Core
  //
  // +optional
  optional int32 targetPort = 2;
}

// Gateway represents an instantiation of a service-traffic handling infrastructure.
message Gateway {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta typeMeta = 1;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 2;

  optional GatewaySpec spec = 3;

  optional GatewayStatus status = 4;
}

// GatewayClass describes a class of Gateways available to the user
// for creating Gateway resources.
//
// GatewayClass is a Cluster level resource.
//
// Support: Core.
message GatewayClass {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta typeMeta = 4;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec for this GatewayClass.
  optional GatewayClassSpec spec = 2;

  // Status of the GatewayClass.
  // +kubebuilder:default={conditions: {{type: "InvalidParameters", status: "Unknown"}}}
  optional GatewayClassStatus status = 3;
}

// GatewayClassCondition contains the details for the current
// condition of this GatewayClass.
//
// Support: Core, unless otherwise specified.
message GatewayClassCondition {
  // Type of this condition.
  optional string type = 1;

  // Status of this condition.
  optional string status = 2;

  // Reason is a machine consumable string for the last
  // transition. It should be a one-word, CamelCase
  // string. Reason will be defined by the controller.
  //
  // Support: Custom; values will be controller-specific.
  //
  // +optional
  optional string reason = 3;

  // Message is a human readable reason for last transition.
  //
  // +optional
  optional string message = 4;

  // LastTransitionTime is the time of the last change to this condition.
  //
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 5;
}

// GatewayClassList contains a list of GatewayClass
message GatewayClassList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta typeMeta = 3;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated GatewayClass items = 2;
}

// GatewayClassParametersObjectReference identifies a parameters object for a
// GatewayClass.
message GatewayClassParametersObjectReference {
  // Group is the group of the referent.  Omitting the value or specifying
  // the empty string indicates the core API group.  For example, use the
  // following to specify a service:
  //
  // fooRef:
  //   resource: services
  //   name: myservice
  //
  // Otherwise, if the core API group is not desired, specify the desired
  // group:
  //
  // fooRef:
  //   group: acme.io
  //   resource: foos
  //   name: myfoo
  //
  // +optional
  optional string group = 1;

  // Resource is the resource of the referent.
  //
  // +kubebuilder:validation:Required
  // +required
  optional string resource = 2;

  // Namespace is the namespace of the referent. When nil, this refers to a
  // cluster-scoped API resource.
  //
  // +optional
  optional string namespace = 3;

  // Name is the name of the referent.
  //
  // +kubebuilder:validation:Required
  // +required
  optional string name = 4;
}

// GatewayClassSpec reflects the configuration of a class of Gateways.
message GatewayClassSpec {
  // Controller is a domain/path string that indicates the
  // controller that managing Gateways of this class.
  //
  // Example: "acme.io/gateway-controller".
  //
  // This field is not mutable and cannot be empty.
  //
  // The format of this field is DOMAIN "/" PATH, where DOMAIN
  // and PATH are valid Kubernetes names
  // (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
  //
  // Support: Core
  //
  // +required
  optional string controller = 1;

  // AllowedGatewayNamespaces is a selector of namespaces that Gateways can
  // use this GatewayClass from. This is a standard Kubernetes LabelSelector,
  // a label query over a set of resources. The result of matchLabels and
  // matchExpressions are ANDed. Controllers must not support Gateways in
  // namespaces outside this selector.
  //
  // An empty selector (default) indicates that Gateways can use this
  // GatewayClass from any namespace. This field is intentionally not a
  // pointer because the nil behavior (no namespaces) is undesirable here.
  //
  // Support: Core
  //
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector allowedGatewayNamespaces = 2;

  // AllowedRouteNamespaces is a selector of namespaces that Gateways of this
  // class can reference Routes in. This is a standard Kubernetes
  // LabelSelector, a label query over a set of resources. The result of
  // matchLabels and matchExpressions are ANDed. Controllers must not support
  // Routes in namespaces outside this selector.
  //
  // A nil selector (default) indicates that Gateways of this class can
  // reference Routes within the same namespace. An empty selector indicates
  // that Gateways can reference Routes in any namespace. This field is
  // intentionally a pointer to support the nil behavior (only local Routes
  // allowed).
  //
  // Support: Core
  //
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector allowedRouteNamespaces = 3;

  // ParametersRef is a controller specific resource containing
  // the configuration parameters corresponding to this
  // class. This is optional if the controller does not require
  // any additional configuration.
  //
  // Valid resources for reference are up to the Controller. Examples
  // include "configmaps" (omit or specify the empty string for the group
  // to indicate the core API group) or a custom resource (CRD).  Omitting
  // or specifying the empty string for both the resource and group
  // indicates that the resource is "configmaps".  If the referent cannot
  // be found, the GatewayClass's "InvalidParameters" status condition
  // will be true.
  //
  // Support: Custom
  //
  // +optional
  // +protobuf=false
  optional GatewayClassParametersObjectReference parametersRef = 4;
}

// GatewayClassStatus is the current status for the GatewayClass.
message GatewayClassStatus {
  // Conditions is the current status from the controller for
  // this GatewayClass.
  // +kubebuilder:default={{type: "InvalidParameters", status: "Unknown"}}
  repeated GatewayClassCondition conditions = 1;
}

// GatewayCondition is an error status for a given route.
message GatewayCondition {
  // Type indicates the type of condition.
  optional string type = 1;

  // Status describes the current state of this condition. Can be "True",
  // "False", or "Unknown".
  optional string status = 2;

  // Message is a human-understandable message describing the condition.
  // +optional
  optional string message = 3;

  // Reason indicates why the condition is in this state.
  // +optional
  optional string reason = 4;

  // LastTransitionTime indicates the last time this condition changed.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 5;
}

// GatewayList contains a list of Gateway
message GatewayList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta typeMeta = 1;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 2;

  repeated Gateway items = 3;
}

// GatewayObjectReference identifies a Gateway object.
message GatewayObjectReference {
  // Namespace is the namespace of the referent.
  // +optional
  optional string namespace = 1;

  // Name is the name of the referent.
  //
  // +kubebuilder:validation:Required
  // +required
  optional string name = 2;
}

// GatewaySpec defines the desired state of Gateway.
//
// The Spec is split into two major pieces: listeners describing
// client-facing properties and routes that describe application-level
// routing.
//
// Not all possible combinations of options specified in the Spec are
// valid. Some invalid configurations can be caught synchronously via a
// webhook, but there are many cases that will require asynchronous
// signaling via the GatewayStatus block.
message GatewaySpec {
  // Class used for this Gateway. This is the name of a GatewayClass resource.
  optional string class = 1;

  // Listeners associated with this Gateway. Listeners define what addresses,
  // ports, protocols are bound on this Gateway.
  repeated Listener listeners = 2;

  // Routes specifies a schema for associating routes with the Gateway using
  // selectors. A route is a resource capable of servicing a request and allows
  // a cluster operator to expose a cluster resource (i.e. Service) by
  // externally-reachable URL, load-balance traffic and terminate SSL/TLS.
  // Typically, a route is a "httproute" or "tcproute" in group
  // "networking.x-k8s.io". However, an implementation may support other resources.
  //
  // Support: Core
  optional RouteBindingSelector routes = 3;
}

// GatewayStatus defines the observed state of Gateway.
message GatewayStatus {
  // Conditions describe the current conditions of the Gateway.
  repeated GatewayCondition conditions = 1;

  // Listeners provide status for each listener defined in the Spec. The name
  // in ListenerStatus refers to the corresponding Listener of the same name.
  repeated ListenerStatus listeners = 2;
}

// HTTPHeaderFilter defines the filter behavior for a request match.
message HTTPHeaderFilter {
  // Add adds the given header (name, value) to the request
  // before the action.
  //
  // Input:
  //   GET /foo HTTP/1.1
  //
  // Config:
  //   add: {"my-header": "foo"}
  //
  // Output:
  //   GET /foo HTTP/1.1
  //   my-header: foo
  //
  // Support: extended?
  map<string, string> add = 1;

  // Remove the given header(s) on the HTTP request before the
  // action. The value of RemoveHeader is a list of HTTP header
  // names. Note that the header names are case-insensitive
  // [RFC-2616 4.2].
  //
  // Input:
  //   GET /foo HTTP/1.1
  //   My-Header1: ABC
  //   My-Header2: DEF
  //   My-Header2: GHI
  //
  // Config:
  //   remove: ["my-header1", "my-header3"]
  //
  // Output:
  //   GET /foo HTTP/1.1
  //   My-Header2: DEF
  //
  // Support: extended?
  repeated string remove = 2;
}

// HTTPRoute is the Schema for the httproutes API
message HTTPRoute {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta typeMeta = 1;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 2;

  optional HTTPRouteSpec spec = 3;

  optional HTTPRouteStatus status = 4;
}

// HTTPRouteAction is the action taken given a match.
message HTTPRouteAction {
  // ForwardTo sends requests to the referenced object.  The
  // resource may be "services" (omit or use the empty string for the
  // group), or an implementation may support other resources (for
  // example, resource "myroutetargets" in group "networking.acme.io").
  // Omitting or specifying the empty string for both the resource and
  // group indicates that the resource is "services".  If the referent
  // cannot be found, the "InvalidRoutes" status condition on any Gateway
  // that includes the HTTPRoute will be true.
  optional ForwardToTarget forwardTo = 1;

  // ExtensionRef is an optional, implementation-specific extension to the
  // "action" behavior.  The resource may be "configmaps" (use the empty
  // string for the group) or an implementation-defined resource (for
  // example, resource "myrouteactions" in group "networking.acme.io").
  // Omitting or specifying the empty string for both the resource and
  // group indicates that the resource is "configmaps".  If the referent
  // cannot be found, the "InvalidRoutes" status condition on any Gateway
  // that includes the HTTPRoute will be true.
  //
  // Support: custom
  //
  // +optional
  optional LocalObjectReference extensionRef = 2;
}

// HTTPRouteFilter defines a filter-like action to be applied to
// requests.
message HTTPRouteFilter {
  // Headers related filters.
  //
  // Support: extended
  // +optional
  optional HTTPHeaderFilter headers = 1;

  // ExtensionRef is an optional, implementation-specific extension to the
  // "filter" behavior.  The resource may be "configmap" (use the empty
  // string for the group) or an implementation-defined resource (for
  // example, resource "myroutefilters" in group "networking.acme.io").
  // Omitting or specifying the empty string for both the resource and
  // group indicates that the resource is "configmaps".  If the referent
  // cannot be found, the "InvalidRoutes" status condition on any Gateway
  // that includes the HTTPRoute will be true.
  //
  // Support: custom
  //
  // +optional
  optional LocalObjectReference extensionRef = 2;
}

// HTTPRouteHost is the configuration for a given host.
message HTTPRouteHost {
  // Hostname is the fully qualified domain name of a network host,
  // as defined by RFC 3986. Note the following deviations from the
  // "host" part of the URI as defined in the RFC:
  //
  // 1. IPs are not allowed.
  // 2. The `:` delimiter is not respected because ports are not allowed.
  //
  // Incoming requests are matched against Hostname before processing HTTPRoute
  // rules. For example, if the request header contains host: foo.example.com,
  // an HTTPRoute with hostname foo.example.com will match. However, an
  // HTTPRoute with hostname example.com or bar.example.com will not match.
  // If Hostname is unspecified, the Gateway routes all traffic based on
  // the specified rules.
  //
  // Support: Core
  //
  // +optional
  optional string hostname = 1;

  // Rules are a list of HTTP matchers, filters and actions.
  repeated HTTPRouteRule rules = 2;

  // ExtensionRef is an optional, implementation-specific extension to the
  // "host" block.  The resource may be "configmaps" (omit or specify the
  // empty string for the group) or an implementation-defined resource
  // (for example, resource "myroutehosts" in group "networking.acme.io").
  // Omitting or specifying the empty string for both the resource and
  // group indicates that the resource is "configmaps".  If the referent
  // cannot be found, the "InvalidRoutes" status condition on any Gateway
  // that includes the HTTPRoute will be true.
  //
  // Support: custom
  //
  // +optional
  optional LocalObjectReference extensionRef = 3;
}

// HTTPRouteList contains a list of HTTPRoute
message HTTPRouteList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta typeMeta = 1;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 2;

  repeated HTTPRoute items = 3;
}

// HTTPRouteMatch defines the predicate used to match requests to a
// given action.
message HTTPRouteMatch {
  // PathType is defines the semantics of the `Path` matcher.
  //
  // Support: core (Exact, Prefix)
  // Support: extended (RegularExpression)
  // Support: custom (ImplementationSpecific)
  //
  // Default: "Exact"
  //
  // +optional
  optional string pathType = 1;

  // Path is the value of the HTTP path as interpreted via
  // PathType.
  //
  // Default: "/"
  optional string path = 2;

  // HeaderType defines the semantics of the `Header` matcher.
  //
  // +optional
  optional string headerType = 3;

  // Header are the Header matches as interpreted via
  // HeaderType.
  //
  // +optional
  map<string, string> header = 4;

  // ExtensionRef is an optional, implementation-specific extension to the
  // "match" behavior.  The resource may be "configmap" (use the empty
  // string for the group) or an implementation-defined resource (for
  // example, resource "myroutematchers" in group "networking.acme.io").
  // Omitting or specifying the empty string for both the resource and
  // group indicates that the resource is "configmaps".  If the referent
  // cannot be found, the "InvalidRoutes" status condition on any Gateway
  // that includes the HTTPRoute will be true.
  //
  // Support: custom
  //
  // +optional
  optional LocalObjectReference extensionRef = 5;
}

// HTTPRouteRule is the configuration for a given path.
message HTTPRouteRule {
  // Match defines which requests match this path.
  // +optional
  optional HTTPRouteMatch match = 1;

  // Filter defines what filters are applied to the request.
  // +optional
  optional HTTPRouteFilter filter = 2;

  // Action defines what happens to the request.
  // +optional
  optional HTTPRouteAction action = 3;
}

// HTTPRouteSpec defines the desired state of HTTPRoute
message HTTPRouteSpec {
  // Hosts is a list of Host definitions.
  repeated HTTPRouteHost hosts = 1;

  // Default is the default host to use. Default.Hostnames must
  // be an empty list.
  //
  // +optional
  optional HTTPRouteHost default = 2;
}

// HTTPRouteStatus defines the observed state of HTTPRoute.
message HTTPRouteStatus {
  repeated GatewayObjectReference gatewayRefs = 1;
}

// Listener defines a
message Listener {
  // Name is the listener's name and should be specified as an
  // RFC 1035 DNS_LABEL [1]:
  //
  // [1] https://tools.ietf.org/html/rfc1035
  //
  // Each listener of a Gateway must have a unique name. Name is used
  // for associating a listener in Gateway status.
  //
  // Support: Core
  //
  // +required
  optional string name = 1;

  // Address requested for this listener. This is optional and behavior
  // can depend on GatewayClass. If a value is set in the spec and
  // the request address is invalid, the GatewayClass MUST indicate
  // this in the associated entry in GatewayStatus.Listeners.
  //
  // Support:
  //
  // +optional
  optional ListenerAddress address = 2;

  // Port is a list of ports associated with the Address.
  //
  // Support:
  // +optional
  optional int32 port = 3;

  // Protocol to use.
  //
  // Support:
  // +optional
  optional string protocol = 4;

  // TLS is the TLS configuration for the Listener. If unspecified,
  // the listener will not support TLS connections.
  //
  // Support: Core
  //
  // +optional
  optional TLSConfig tls = 5;

  // ExtensionRef for this Listener.  The resource may be "configmaps" or
  // an implementation-defined resource (for example, resource
  // "mylisteners" in group "networking.acme.io").  Omitting or specifying
  // the empty string for both the resource and group indicates that the
  // resource is "configmaps".  If the referent cannot be found, the
  // listener's "InvalidListener" status condition will be true.
  //
  // Support: custom.
  // +optional
  optional LocalObjectReference extensionRef = 6;
}

// ListenerAddress describes an address for the Listener.
message ListenerAddress {
  // Type of the Address. This is one of the *AddressType constants.
  //
  // Support: Extended
  optional string type = 1;

  // Value. Examples: "1.2.3.4", "128::1", "my-ip-address". Validity of the
  // values will depend on `Type` and support by the controller.
  optional string value = 2;
}

// ListenerCondition is an error status for a given listener.
message ListenerCondition {
  // Type indicates the type of condition.
  optional string type = 1;

  // Status describes the current state of this condition. Can be "True",
  // "False", or "Unknown".
  optional string status = 2;

  // Message is a human-understandable message describing the condition.
  // +optional
  optional string message = 3;

  // Reason indicates why the condition is in this state.
  // +optional
  optional string reason = 4;

  // LastTransitionTime indicates the last time this condition changed.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 5;
}

// ListenerStatus is the status associated with each listener block.
message ListenerStatus {
  // Name is the name of the listener this status refers to.
  optional string name = 1;

  // Address bound on this listener.
  optional ListenerAddress address = 2;

  // Conditions describe the current condition of this listener.
  repeated ListenerCondition conditions = 3;
}

// RouteMatchExtensionObjectReference identifies a route-match extension object
// within a known namespace.
//
// +k8s:deepcopy-gen=false
message LocalObjectReference {
  // Group is the group of the referent.  Omitting the value or specifying
  // the empty string indicates the core API group.  For example, use the
  // following to specify a service:
  //
  // fooRef:
  //   resource: services
  //   name: myservice
  //
  // Otherwise, if the core API group is not desired, specify the desired
  // group:
  //
  // fooRef:
  //   group: acme.io
  //   resource: foos
  //   name: myfoo
  //
  // +optional
  optional string group = 1;

  // Resource is the resource of the referent.
  //
  // +kubebuilder:validation:Required
  // +required
  optional string resource = 2;

  // Name is the name of the referent.
  //
  // +kubebuilder:validation:Required
  // +required
  optional string name = 3;
}

// RouteBindingSelector defines a schema for associating routes with the Gateway.
// If NamespaceSelector and RouteSelector are defined, only routes matching both
// selectors are associated with the Gateway.
message RouteBindingSelector {
  // NamespaceSelector specifies a set of namespace labels used for selecting
  // routes to associate with the Gateway. If NamespaceSelector is defined,
  // all routes in namespaces matching the NamespaceSelector are associated
  // to the Gateway.
  //
  // An empty NamespaceSelector (default) indicates that routes from any
  // namespace will be associated to this Gateway. This field is intentionally
  // not a pointer because the nil behavior (no namespaces) is undesirable here.
  //
  // Support: Core
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector namespaceSelector = 1;

  // RouteSelector specifies a set of route labels used for selecting
  // routes to associate with the Gateway. If RouteSelector is defined,
  // only routes matching the RouteSelector are associated with the Gateway.
  // An empty RouteSelector matches all routes.
  //
  // If undefined, route labels are not used for associating routes to
  // the gateway.
  //
  // Support: Core
  //
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector routeSelector = 2;
}

// TLSConfig describes a TLS configuration.
//
// References
// - nginx: https://nginx.org/en/docs/http/configuring_https_servers.html
// - envoy: https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/auth/cert.proto
// - haproxy: https://www.haproxy.com/documentation/aloha/9-5/traffic-management/lb-layer7/tls/
// - gcp: https://cloud.google.com/load-balancing/docs/use-ssl-policies#creating_an_ssl_policy_with_a_custom_profile
// - aws: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies
// - azure: https://docs.microsoft.com/en-us/azure/app-service/configure-ssl-bindings#enforce-tls-1112
message TLSConfig {
  // CertificateRefs is a list of references to Kubernetes objects that each
  // contain an identity certificate.  The host name in a TLS SNI client hello
  // message is used for certificate matching and route host name selection.
  // The SNI server_name must match a route host name for the Gateway to route
  // the TLS request.  If an entry in this list omits or specifies the empty
  // string for both the group and the resource, the resource defaults to "secrets".
  // An implementation may support other resources (for example, resource
  // "mycertificates" in group "networking.acme.io").
  //
  // Support: Core (Kubernetes Secrets)
  // Support: Implementation-specific (Other resource types)
  //
  // +required
  repeated LocalObjectReference certificateRefs = 1;

  // MinimumVersion of TLS allowed. It is recommended to use one of
  // the TLS_* constants above. Note: MinimumVersion is not strongly
  // typed to allow implementation-specific versions to be used without
  // requiring updates to the API types. String must be of the form
  // "<protocol><major>_<minor>".
  //
  // Support: Core for TLS1_{1,2,3}. Implementation-specific for all other
  // values.
  //
  // +optional
  optional string minimumVersion = 2;

  // Options are a list of key/value pairs to give extended options
  // to the provider.
  //
  // There variation among providers as to how ciphersuites are
  // expressed. If there is a common subset for expressing ciphers
  // then it will make sense to loft that as a core API
  // construct.
  //
  // Support: Implementation-specific.
  map<string, string> options = 3;
}

// TcpRoute is the Schema for the tcproutes API
message TcpRoute {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta typeMeta = 1;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 2;

  optional TcpRouteSpec spec = 3;

  optional TcpRouteStatus status = 4;
}

// TcpRouteList contains a list of TcpRoute
message TcpRouteList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta typeMeta = 1;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 2;

  repeated TcpRoute items = 3;
}

// TcpRouteSpec defines the desired state of TcpRoute
message TcpRouteSpec {
}

// TcpRouteStatus defines the observed state of TcpRoute
message TcpRouteStatus {
}

// TrafficSplit is the Schema for the trafficsplits API
message TrafficSplit {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta typeMeta = 1;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 2;

  optional TrafficSplitSpec spec = 3;

  optional TrafficSplitStatus status = 4;
}

// TrafficSplitList contains a list of TrafficSplit
message TrafficSplitList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta typeMeta = 1;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 2;

  repeated TrafficSplit items = 3;
}

// TrafficSplitSpec defines the desired state of TrafficSplit
message TrafficSplitSpec {
}

// TrafficSplitStatus defines the observed state of TrafficSplit
message TrafficSplitStatus {
}

