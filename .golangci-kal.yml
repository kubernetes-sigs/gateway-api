version: "2"
linters:
  default: none
  enable:
    - kubeapilinter
  settings:
    custom:
      kubeapilinter:
        type: module
        description: Kube API LInter lints Kube like APIs based on API conventions and best practices.
        settings:
          linters:
            enable:
            - "conditions" # Ensure conditions have the correct json tags and markers.
            - "duplicatemarkers" # Ensure there are no exact duplicate markers. for types and fields.
            - "integers" # Ensure only int32 and int64 are used for integers.
            - "jsontags" # Ensure every field has a json tag.
            - "maxlength" # Ensure all strings and arrays have maximum lengths/maximum items.
            - "nobools" # Bools do not evolve over time, should use enums instead.
            - "nofloats" # Ensure floats are not used.
            - "nomaps" # Ensure maps are not used.
            - "nophase" # Phase fields are discouraged by the Kube API conventions, use conditions instead.
            - "optionalfields" # Ensure that all fields marked as optional adhere to being pointers and
                               # having the `omitempty` value in their `json` tag where appropriate.
            - "optionalorrequired" # Every field should be marked as `+optional` or `+required`.
            - "requiredfields" # Required fields should not be pointers, and should not have `omitempty`.
            - "statusoptional" # Ensure all first children within status should be optional.
            - "statussubresource" # All root objects that have a `status` field should have a status subresource.
            - "uniquemarkers" # Ensure that types and fields do not contain more than a single definition of a marker that should only be present once.
            disable:
            - "*"
          lintersConfig:
            conditions:
              isFirstField: Warn # Require conditions to be the first field in the status struct.
              usePatchStrategy: Forbid # Require conditions to be the first field in the status struct.
              useProtobuf: Forbid # We don't use protobuf, so protobuf tags are not required.
            optionalFields:
              pointers:
                preference: WhenRequired # Always | WhenRequired # Whether to always require pointers, or only when required. Defaults to `Always`.
                policy: SuggestFix # SuggestFix | Warn # The policy for pointers in optional fields. Defaults to `SuggestFix`.
              omitempty:
                policy: SuggestFix # SuggestFix | Warn | Ignore # The policy for omitempty in optional fields. Defaults to `SuggestF
  exclusions:
    generated: strict
    paths:
    - conformance/
    paths-except:
    - apis/v1/
#    - apisx/ # Those are non stable APIs, but we should probably fix over time
issues:
  max-issues-per-linter: 0
  max-same-issues: 0
run:
  timeout: 5m
  tests: false

