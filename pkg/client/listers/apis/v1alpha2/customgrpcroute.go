/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha2 "sigs.k8s.io/gateway-api/apis/v1alpha2"
)

// CustomGRPCRouteLister helps list CustomGRPCRoutes.
// All objects returned here must be treated as read-only.
type CustomGRPCRouteLister interface {
	// List lists all CustomGRPCRoutes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.CustomGRPCRoute, err error)
	// CustomGRPCRoutes returns an object that can list and get CustomGRPCRoutes.
	CustomGRPCRoutes(namespace string) CustomGRPCRouteNamespaceLister
	CustomGRPCRouteListerExpansion
}

// customGRPCRouteLister implements the CustomGRPCRouteLister interface.
type customGRPCRouteLister struct {
	indexer cache.Indexer
}

// NewCustomGRPCRouteLister returns a new CustomGRPCRouteLister.
func NewCustomGRPCRouteLister(indexer cache.Indexer) CustomGRPCRouteLister {
	return &customGRPCRouteLister{indexer: indexer}
}

// List lists all CustomGRPCRoutes in the indexer.
func (s *customGRPCRouteLister) List(selector labels.Selector) (ret []*v1alpha2.CustomGRPCRoute, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.CustomGRPCRoute))
	})
	return ret, err
}

// CustomGRPCRoutes returns an object that can list and get CustomGRPCRoutes.
func (s *customGRPCRouteLister) CustomGRPCRoutes(namespace string) CustomGRPCRouteNamespaceLister {
	return customGRPCRouteNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CustomGRPCRouteNamespaceLister helps list and get CustomGRPCRoutes.
// All objects returned here must be treated as read-only.
type CustomGRPCRouteNamespaceLister interface {
	// List lists all CustomGRPCRoutes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.CustomGRPCRoute, err error)
	// Get retrieves the CustomGRPCRoute from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.CustomGRPCRoute, error)
	CustomGRPCRouteNamespaceListerExpansion
}

// customGRPCRouteNamespaceLister implements the CustomGRPCRouteNamespaceLister
// interface.
type customGRPCRouteNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CustomGRPCRoutes in the indexer for a given namespace.
func (s customGRPCRouteNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.CustomGRPCRoute, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.CustomGRPCRoute))
	})
	return ret, err
}

// Get retrieves the CustomGRPCRoute from the indexer for a given namespace and name.
func (s customGRPCRouteNamespaceLister) Get(name string) (*v1alpha2.CustomGRPCRoute, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("customgrpcroute"), name)
	}
	return obj.(*v1alpha2.CustomGRPCRoute), nil
}
