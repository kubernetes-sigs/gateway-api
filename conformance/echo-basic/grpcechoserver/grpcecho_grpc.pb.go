// Copyright 2024 The Kubernetes Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.22.2
// source: grpcecho.proto

// This package name should in general be kept in sync with the directory in which it lives.

package grpcechoserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GrpcEcho_Echo_FullMethodName      = "/gateway_api_conformance.echo_basic.grpcecho.GrpcEcho/Echo"
	GrpcEcho_EchoTwo_FullMethodName   = "/gateway_api_conformance.echo_basic.grpcecho.GrpcEcho/EchoTwo"
	GrpcEcho_EchoThree_FullMethodName = "/gateway_api_conformance.echo_basic.grpcecho.GrpcEcho/EchoThree"
)

// GrpcEchoClient is the client API for GrpcEcho service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcEchoClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// Behaves identically to Echo, but lives at a different method to
	// emulate the service having more than one method.
	EchoTwo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// An intentionally unimplemented method.
	EchoThree(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
}

type grpcEchoClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcEchoClient(cc grpc.ClientConnInterface) GrpcEchoClient {
	return &grpcEchoClient{cc}
}

func (c *grpcEchoClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, GrpcEcho_Echo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcEchoClient) EchoTwo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, GrpcEcho_EchoTwo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcEchoClient) EchoThree(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, GrpcEcho_EchoThree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcEchoServer is the server API for GrpcEcho service.
// All implementations must embed UnimplementedGrpcEchoServer
// for forward compatibility.
type GrpcEchoServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	// Behaves identically to Echo, but lives at a different method to
	// emulate the service having more than one method.
	EchoTwo(context.Context, *EchoRequest) (*EchoResponse, error)
	// An intentionally unimplemented method.
	EchoThree(context.Context, *EchoRequest) (*EchoResponse, error)
	mustEmbedUnimplementedGrpcEchoServer()
}

// UnimplementedGrpcEchoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGrpcEchoServer struct{}

func (UnimplementedGrpcEchoServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedGrpcEchoServer) EchoTwo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoTwo not implemented")
}
func (UnimplementedGrpcEchoServer) EchoThree(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoThree not implemented")
}
func (UnimplementedGrpcEchoServer) mustEmbedUnimplementedGrpcEchoServer() {}
func (UnimplementedGrpcEchoServer) testEmbeddedByValue()                  {}

// UnsafeGrpcEchoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcEchoServer will
// result in compilation errors.
type UnsafeGrpcEchoServer interface {
	mustEmbedUnimplementedGrpcEchoServer()
}

func RegisterGrpcEchoServer(s grpc.ServiceRegistrar, srv GrpcEchoServer) {
	// If the following call pancis, it indicates UnimplementedGrpcEchoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GrpcEcho_ServiceDesc, srv)
}

func _GrpcEcho_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcEchoServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcEcho_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcEchoServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcEcho_EchoTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcEchoServer).EchoTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcEcho_EchoTwo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcEchoServer).EchoTwo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcEcho_EchoThree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcEchoServer).EchoThree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcEcho_EchoThree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcEchoServer).EchoThree(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcEcho_ServiceDesc is the grpc.ServiceDesc for GrpcEcho service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcEcho_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway_api_conformance.echo_basic.grpcecho.GrpcEcho",
	HandlerType: (*GrpcEchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _GrpcEcho_Echo_Handler,
		},
		{
			MethodName: "EchoTwo",
			Handler:    _GrpcEcho_EchoTwo_Handler,
		},
		{
			MethodName: "EchoThree",
			Handler:    _GrpcEcho_EchoThree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcecho.proto",
}
