apiVersion: gateway.networking.k8s.io/v1beta1
kind: Gateway
metadata:
  name: tls-backend-gateway
  namespace: gateway-conformance-infra
spec:
  gatewayClassName: "{GATEWAY_CLASS_NAME}"
  listeners:
  - name: https-with-hostname
    port: 443
    protocol: TLS
    hostname: "*.abc.example.com"
    allowedRoutes:
      namespaces:
        from: Same
    tls:
      certificateRefs:
      - group: ""
        kind: Secret
        name: backend-tls-checks-certificate
        namespace: gateway-conformance-infra
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: tls-backend-route
  namespace: gateway-conformance-infra
spec:
  hostnames:
  - www.abc.example.com
  parentRefs:
  - group: gateway.networking.k8s.io
    kind: Gateway
    name: tls-backend-gateway
  rules:
  - backendRefs:
    - group: ""
      kind: Service
      name: tls-backend
      port: 443
      weight: 1
    matches:
    - path:
        type: PathPrefix
        value: /
---
apiVersion: gateway.networking.k8s.io/v1alpha3
kind: BackendTLSPolicy
metadata:
  name: tls-backend-tls-policy
  namespace: gateway-conformance-infra
spec:
  targetRefs:
  - group: ""
    kind: Service
    name: tls-backend
    sectionName: "443"
  validation:
    caCertificateRefs:
    - group: ""
      kind: "Secret"
      name: "backend-tls-checks-certificate"
    hostname: www.abc.example.com
---
apiVersion: v1
kind: Service
metadata:
  name: tls-backend
  namespace: gateway-conformance-infra
spec:
  selector:
    app: tls-backend
  ports:
  - protocol: TCP
    port: 443
    targetPort: 8443
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tls-backend
  namespace: gateway-conformance-infra
  labels:
    app: tls-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tls-backend
  template:
    metadata:
      labels:
        app: tls-backend
    spec:
      containers:
      - name: tls-backend
        image: gcr.io/k8s-staging-gateway-api/echo-basic:v20240412-v1.0.0-394-g40c666fd
        volumeMounts:
        - name: secret-volume
          mountPath: /etc/secret-volume
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: TLS_SERVER_CERT
          value: /etc/secret-volume/crt
        - name: TLS_SERVER_PRIVKEY
          value: /etc/secret-volume/key
        resources:
          requests:
            cpu: 10m
      volumes:
      - name: secret-volume
        secret:
          secretName: backend-tls-checks-certificate
          items:
          - key: tls.crt
            path: crt
          - key: tls.key
            path: key